@page "/rijesenizadaci"
@using WebApiPovezivanje.Models;
@inject HttpClient httpClient;
@inject NavigationManager navManager;
@using System;
@using System.Text;

<h3>Lista riješenih zadataka</h3>


<input type="text" @bind-value="search" placeholder="Upiši za pretragu" />
<button @onclick="Lista">Dohvati sve</button>
<button @onclick="Trazi">Potrazi</button>

<ul>
    @foreach(var item in osobe)
    {
        if (item.isDone == true)
        {
            <li>

                <div class="card">
                    <h5 class="card-header">
                        Zadatak:<br>
                        <b> @item.todo </b>
                    </h5>
                    <div class="card-body">
                        <h5 class="card-title">
                            Zaduženi Radnik:
                            @item.radnikIme,  @item.radnikPrezime
                        </h5>
                        <p class="card-text"> @item.opisPosla</p>
                       
                            <p class="card-title">
                                Uspješno završen zadatak
                            </p>
                            <p class="card-title">@item.datum</p>

                        <button @onclick="()=>Obrisi(item.id)">Detalji</button>


                    </div>
                </div>


            </li>
        }
    }

</ul>

@code {
    public List<RadniZadatak> osobe = new List<RadniZadatak>();
    public string search = "";
    public RadniZadatak osoba = new RadniZadatak();

    protected override async Task OnInitializedAsync()
    {
        osobe = await DohvatiListuAsync();
    }
    //sinhrono
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    

    public async Task <List<RadniZadatak>>DohvatiListuAsync()
    {
        List<RadniZadatak> osobeSaServera = new List<RadniZadatak>();
        var result = await httpClient.GetAsync("https://expertvjezbeapi.azurewebsites.net/api/ToDoSeminars");
        if (result.IsSuccessStatusCode)
        {
            osobeSaServera = await result.Content.ReadFromJsonAsync<List<RadniZadatak>>();

            osobeSaServera = osobeSaServera.OrderByDescending(x => x.id).ToList();
        }
        return osobeSaServera;
    }
    public async Task Lista()
    {
        osobe = await DohvatiListuAsync();
    }
   <!--- public async Task Trazi()
    {
        osobe = osobe.Where(x => x.Ime.ToLower().Contains(search.ToLower()) || x.Prezime.ToLower().Contains(search)).ToList();
    }
    -->
    protected void Detalji(int idOsobe)
    {
        navManager.NavigateTo($"detalji/{idOsobe}");
    }
    protected void Uredi(int idOsobe)
    {
        navManager.NavigateTo($"edit/{idOsobe}");
    }
    protected void Obrisi(int idOsobe)
    {
        navManager.NavigateTo($"delete/{idOsobe}");
    }

    protected void Dodaj()
    {
        navManager.NavigateTo($"dodaj");
    }
    public async Task Trazi()
    {
        osobe = osobe.Where(x => x.radnikIme.ToLower().Contains(search.ToLower()) || x.radnikPrezime.ToLower().Contains(search)).ToList();
    }
   /* protected void Napravi()
    {
        //before your loop
        var csv = new StringBuilder();

       ///in your loop
        var first = osobe[0].ToString();
        //Suggestion made by KyleMit
        var newLine = string.Format("{0}", first);
        csv.AppendLine(newLine);
        /
        //after your loop
        File.WriteAllText("C:/MyTest.csv", csv.ToString());
    }
    */
}
